#!/usr/bin/python
# 
# Add color tag to phylo XML tree for jsPhyloSvg display. 
#
# Author: TRAN MINH TRI
# Date: 27 Nov 2015
# 

from lxml import etree
import sqlite3 as lite
import argparse, math, sys


# Get name of XML file
parser = argparse.ArgumentParser( description="Add color tag to phylo XML tree for jsPhyloSvg display." )
parser.add_argument( 'emFile', metavar="<result.txt>", type = str, help='result.txt file generated by miREM' )
parser.add_argument( 'xmlFile', metavar="<xml-file>", type = str, help='Phylogenetic tree in PhyloXML format' )
args = parser.parse_args()

# Load miRNA and their respective EM score
mirnas = {}
max_hp = 0
with open(args.emFile) as refFile:
    count = 0
    last_em = -1
    for line in refFile:
        mirna, pval, apval, em, ratio, targ = line.strip().split("\t")
        try:
            hp = -math.log10(float( apval )) 
            if hp > max_hp: max_hp = hp
        except Exception as e:
            hp = 'inf'
        finally:
            if em == last_em: count -=1
            mirnas[mirna] = ( apval, str(hp), em, count )
            count += 1
            last_em = em 
            
con = lite.connect('/var/www/mirem2/mirvis_progs/mirem.db')

# Parse phyloXml file to tree
tree = etree.parse( args.xmlFile )
root = tree.getroot()  # normally created by etree.Element("root")
#etree.tostring( root ) # print the tree

# Edit individual entry
em_count = 1
for elem in root.iter():
    if "name" in elem.tag and elem.text in mirnas:
        parent = elem.getparent()
        
        # tool tip 
        anno = etree.SubElement( parent, "annotation" )
        desc = etree.SubElement( anno, "desc" )
        desc.text = "HG p-value: " + mirnas[ elem.text ][0]
        
        # URI to mirna
        uri = etree.SubElement( anno, "uri" )
        uri.text = "http://ctrad-csi.nus.edu.sg/mirem2/?page_id=180&mirna_name=" + elem.text

        # barchart
        chart = etree.SubElement( parent, "chart" )
        content = etree.SubElement( chart, "content" )
        
        content.text = str(max_hp * 1.2) if mirnas[ elem.text ][1] == 'inf' else mirnas[ elem.text ][1]
        #print max_hp, content.text, elem.text
        # set color
        if not mirnas[ elem.text ][2] == '-':
            em = mirnas[ elem.text ][2]
            #em = em if len(em) < 6 else em[:4]
            desc.text += "\nEM: " + em 
            elem.set( "bgStyle", "em" + str(mirnas[ elem.text ][3]) )
            em_count += 1
        else:
            elem.set( "bgStyle", "base" )

        # get sequence
        with con:
            cur = con.cursor()
            cur.execute('SELECT sequence FROM Mirna WHERE mirna=:mra', { "mra" : elem.text } )

            data = cur.fetchone()
            desc.text += '\n[[ ' + data[0] + " ]]"

# Add color library: create <render> tag
phylo = root[0]
render = etree.SubElement( phylo, "render" )
styles = etree.SubElement( render, "styles" )
# Bar chart
parameter = etree.SubElement( render, "parameter" )
circular = etree.SubElement( parameter, "circular" )
bradius = etree.SubElement( circular, "bufferRadius" )
bradius.text = "0.5"
charts = etree.SubElement( render, "charts" )
content = etree.SubElement( charts, "content")
content.set( "type", "bar" )
content.set( "fill", "#666" )
content.set( "width", "0.2" )
barchart = etree.SubElement( styles, "barchart" )
barchart.set( "fill", "#333" )
barchart.set( "stroke-width", "0" )
# miRNA with EM score
class Color:
    def __init__(self, value):
        self.value = value

red = Color(250)
green = Color(50)
blue = Color(50)
red.inc = -1; red.next = blue; red.active = False;
green.inc = 1; green.next = red; green.active = True;
blue.inc = 1; blue.next = green; blue.active = False;

def makeGradient( clr, step ):
    while not clr.active: clr = clr.next
    newval = clr.value + clr.inc * step
    if newval > 255 or newval < 50:
        clr.inc = -clr.inc
        clr.active = False
        clr.next.active = True
        makeGradient( clr, step )
    else:
        clr.value = newval

colors=[]
for i in range(51): # make a 50-color scale
    color = '#'
    colord = '#'
    for hue in red, green, blue:
        color += format( hue.value, '02x' )
        colord += format( hue.value / 6 * 5, '02x' )
    colors.append( (color, colord) )
    makeGradient( green, 8 )

dist = 51/em_count
for num in range(em_count):
    stylename = "em" + str(num)
    color_idx = num*dist
    haveem = etree.SubElement( styles, stylename )
    haveem.set( "fill", color )
    haveem.set( "stroke", color)
    haveem.set( "type", "radialGradient" )
    stop1 = etree.SubElement( haveem, "stop")
    stop1.set( "offset", "0%" )
    stop1.set( "style", "stop-color:%s; stop-opacity:0" % colors[color_idx][0] )
    stop2 = etree.SubElement( haveem, "stop")
    stop2.set( "offset", "93%" )
    stop2.set( "style", "stop-color:%s; stop-opacity:1" % colors[color_idx][0] )
    stop3 = etree.SubElement( haveem, "stop")
    stop3.set( "offset", "100%" )
    stop3.set( "style", "stop-color:%s; stop-opacity:1" % colors[color_idx][1] )

# no EM score
bgbase = etree.SubElement( styles, "base" )
bgbase.set( "fill", "#eeeeee" )
bgbase.set( "stroke", "#eeeeee" )
bgbase.set( "type", "radialGradient" )
stop1 = etree.SubElement( bgbase, "stop")
stop1.set( "offset", "0%" )
stop1.set( "style", "stop-color:#eeeeee; stop-opacity:0" )
stop2 = etree.SubElement( bgbase, "stop")
stop2.set( "offset", "93%" )
stop2.set( "style", "stop-color:#eeeeee; stop-opacity:1" )
stop3 = etree.SubElement( bgbase, "stop")
stop3.set( "offset", "100%" )
stop3.set( "style", "stop-color:#dddddd; stop-opacity:1" )


# write result to the same file again ;)
with open( args.xmlFile, "w" ) as f:
    f.write( etree.tostring( root, pretty_print=True ) )
